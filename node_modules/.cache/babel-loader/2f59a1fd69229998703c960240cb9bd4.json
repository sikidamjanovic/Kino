{"ast":null,"code":"var _jsxFileName = \"/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/containers/Home.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MovieCard from '../components/MovieCard';\nimport Anime from 'react-anime';\nimport '../css/main.css';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      query: 'harr',\n      loaded: false,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevState, snapshot) {\n    if (this.state.query !== prevState.query) {\n      this.fetchData(this.state.query);\n    }\n  }\n\n  handleClick(e) {\n    console.log(e.target);\n  }\n\n  fetchData(query) {\n    query = this.state.query; //Api call based on user query\n\n    fetch('https://api.themoviedb.org/3/search/movie?api_key=17c21a1abd8ae7be6ee8986389011906&query=' + query).then(response => {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.json();\n    }) //Store data in state\n    .then(json => {\n      this.setState({\n        loaded: true,\n        error: false,\n        data: json.results\n      });\n    }) //Catches API limit errors, reloads page until limit resets\n    .catch(err => {\n      if (err.status === '429') {\n        this.setState({\n          error: true\n        });\n        this.fetchData();\n      }\n    });\n  }\n\n  renderMovies() {\n    var data = this.state.data;\n    var loaded = this.state.loaded; //If API call was succesfull and component has data, return grid of movies\n\n    if (loaded) {\n      return React.createElement(Row, {\n        className: \"movie-feed-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, data.map((item, i) => React.createElement(Col, {\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(MovieCard, {\n        id: data[i].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }))));\n    } //TODO: Return placeholder for movie loading \n    else {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"SUBMIT\"))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.renderMovies()));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/containers/Home.js"],"names":["React","Component","Container","Row","Col","MovieCard","Anime","Home","state","data","query","loaded","error","componentDidMount","fetchData","componentDidUpdate","prevState","snapshot","handleClick","e","console","log","target","fetch","then","response","ok","json","setState","results","catch","err","status","renderMovies","map","item","i","id","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport MovieCard from '../components/MovieCard'\nimport Anime from 'react-anime'\nimport '../css/main.css'\n\nclass Home extends Component {\n    state = { \n        data: [],\n        query: 'harr',\n        loaded: false,\n        error: false\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    componentDidUpdate(prevState, snapshot){\n        if(this.state.query !== prevState.query){\n            this.fetchData(this.state.query)\n        }\n    }\n\n    handleClick(e){\n        console.log(e.target)\n    }\n\n    fetchData(query){\n        query = this.state.query\n        //Api call based on user query\n        fetch('https://api.themoviedb.org/3/search/movie?api_key=17c21a1abd8ae7be6ee8986389011906&query='+ query)\n        .then( response => {\n            if (!response.ok) { throw response }\n            return response.json() \n        })\n        //Store data in state\n        .then( json => {\n            this.setState({loaded:true, error:false, data: json.results}) \n        })\n        //Catches API limit errors, reloads page until limit resets\n        .catch( err => {\n            if(err.status === '429'){\n                this.setState({error:true})\n                this.fetchData()\n            }\n        })\n    }\n\n    renderMovies(){\n        var data = this.state.data\n        var loaded = this.state.loaded\n        //If API call was succesfull and component has data, return grid of movies\n        if(loaded){\n            return (\n                <Row className=\"movie-feed-row\">\n                    {data.map((item, i) => (\n                            <Col sm={3}>\n                                <MovieCard id={data[i].id}/>\n                            </Col>\n                    ))}\n                </Row>\n            )\n        }\n        //TODO: Return placeholder for movie loading \n        else{\n            return <p>Loading...</p>\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"app\">\n                <div id=\"header\">\n                    <form>\n                        <input type=\"text\"/>\n                        <button type=\"submit\" onClick={this.handleClick.bind(this)}>SUBMIT</button>\n                    </form>\n                </div>\n                <Container>\n                    {this.renderMovies()}\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}