{"ast":null,"code":"var _jsxFileName = \"/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/components/MovieCard.js\";\nimport React, { Component } from 'react';\nimport { Palette } from 'react-palette';\nimport { MdStar, MdPlayArrow } from 'react-icons/md';\nimport '../css/movie-card.css';\nimport NoImg from '../img/noimg.png';\n\nclass MovieCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      loaded: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch('https://api.themoviedb.org/3/movie/' + this.props.id + '?api_key=17c21a1abd8ae7be6ee8986389011906').then(response => {\n      if (!response.ok) {\n        throw Error(\"Network request failed\");\n      }\n\n      return response;\n    }).then(d => d.json()).then(d => {\n      this.setState({\n        data: d,\n        loaded: true\n      });\n    });\n  }\n\n  openModal() {\n    console.log('opened');\n  }\n\n  renderPoster() {\n    var loaded = this.state.loaded;\n\n    if (loaded) {\n      var poster = this.state.data.poster_path;\n\n      if (poster) {\n        return React.createElement(\"div\", {\n          id: \"poster-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"https://image.tmdb.org/t/p/w500\" + poster,\n          alt: \"poster\",\n          id: \"poster\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          id: \"poster-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: NoImg,\n          alt: \"poster\",\n          id: \"noImg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }));\n      }\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"No Image, Sorry.\");\n    }\n  }\n\n  renderLine() {\n    var path = this.state.data.poster_path;\n    return React.createElement(Palette, {\n      src: \"https://image.tmdb.org/t/p/w500\" + path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, ({\n      data,\n      loading,\n      error\n    }) => React.createElement(\"div\", {\n      style: {\n        backgroundColor: data.vibrant\n      },\n      id: \"line\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n  renderInfo() {\n    var loaded = this.state.loaded;\n    var data = this.state.data;\n\n    if (loaded) {\n      return React.createElement(\"div\", {\n        id: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"line-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.renderLine()), React.createElement(\"div\", {\n        id: \"info-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"title-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, data.title)), React.createElement(\"div\", {\n        id: \"buttons-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"rating\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(MdStar, {\n        id: \"star\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), data.vote_average), React.createElement(\"p\", {\n        className: \"year\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, data.release_date.substring(0, 4)), React.createElement(\"p\", {\n        className: \"trailer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(MdPlayArrow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), \"TRAILER\"))));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"movie-card\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.renderPoster(), this.renderInfo()));\n  }\n\n}\n\nexport default MovieCard;","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/components/MovieCard.js"],"names":["React","Component","Palette","MdStar","MdPlayArrow","NoImg","MovieCard","state","data","loaded","componentDidMount","fetchData","fetch","props","id","then","response","ok","Error","d","json","setState","openModal","console","log","renderPoster","poster","poster_path","renderLine","path","loading","error","backgroundColor","vibrant","renderInfo","title","vote_average","release_date","substring","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Palette } from 'react-palette'\nimport { MdStar, MdPlayArrow } from 'react-icons/md'\nimport '../css/movie-card.css'\nimport NoImg from '../img/noimg.png'\n\nclass MovieCard extends Component {\n\n    state = {\n        data: [],\n        loaded: false\n    }\n\n    componentDidMount(){\n        this.fetchData()\n    }\n\n    fetchData(){\n        fetch('https://api.themoviedb.org/3/movie/' + this.props.id + '?api_key=17c21a1abd8ae7be6ee8986389011906')\n        .then(response => {\n            if (!response.ok) {\n                throw Error(\"Network request failed\")\n            }\n            return response\n        })\n        .then(d => d.json())\n        .then(d => {\n            this.setState({\n                data: d,\n                loaded: true\n            })\n        })\n    }\n\n    openModal(){\n        console.log('opened')\n    }\n\n    renderPoster(){\n        var loaded = this.state.loaded\n        if(loaded){\n            var poster = this.state.data.poster_path\n            if(poster){\n                return (\n                    <div id=\"poster-container\">\n                        <img \n                            src={\"https://image.tmdb.org/t/p/w500\" + poster} \n                            alt=\"poster\" \n                            id=\"poster\"\n                        />\n                    </div>\n                )\n            }else{\n                return (\n                    <div id=\"poster-container\">\n                        <img \n                            src={NoImg}\n                            alt=\"poster\" \n                            id=\"noImg\"\n                        />\n                    </div>\n                )\n            }\n        }else{\n            return <p>No Image, Sorry.</p>\n        }\n    }\n\n    renderLine(){\n        var path = this.state.data.poster_path\n        return(\n            <Palette src={\"https://image.tmdb.org/t/p/w500\" + path}>\n                {({ data, loading, error }) => (\n                    <div style={{ backgroundColor: data.vibrant }}id=\"line\"></div>\n                )}\n            </Palette>\n        )\n    }\n\n    renderInfo(){\n        var loaded = this.state.loaded\n        var data = this.state.data\n\n        if(loaded){\n            return(\n                <div id=\"info\">    \n                    <div id=\"line-container\">\n                        {this.renderLine()}\n                    </div>\n                    <div id=\"info-container\">\n                        <div id=\"title-container\">\n                            <p id=\"title\">{data.title}</p>\n                        </div>\n                        <div id=\"buttons-container\">\n\n                            <p className=\"rating\">\n                                <MdStar id=\"star\"/>\n                                {data.vote_average}\n                            </p>\n\n                            <p className=\"year\"> \n                                {data.release_date.substring(0, 4)}\n                            </p>\n\n                            <p className=\"trailer\">\n                                <MdPlayArrow/>\n                                TRAILER\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n                <div id=\"movie-card\" onClick={this.openModal}>\n                    <div>\n                        {this.renderPoster()}\n                        {this.renderInfo()}\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default MovieCard;"]},"metadata":{},"sourceType":"module"}