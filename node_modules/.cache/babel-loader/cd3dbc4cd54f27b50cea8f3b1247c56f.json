{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\n\nvar _process = require('process');\n\nvar _process2 = _interopRequireDefault(_process);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction series(tasks, cb) {\n  var results = [];\n  var current = 0;\n  var isSync = true;\n\n  function done(err) {\n    function end() {\n      if (cb) cb(err, results);\n    }\n\n    if (isSync) _process2.default.nextTick(end);else end();\n  }\n\n  function each(err, result) {\n    results.push(result);\n    if (++current >= tasks.length || err) done(err);else tasks[current](each);\n  }\n\n  if (tasks.length > 0) tasks[0](each);else done(null);\n  isSync = false;\n}\n/**\n * Run the functions in the tasks array in series, each one running once the previous function has completed.\n * If any functions in the series pass an error to its callback, no more functions are run,\n * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results\n * when tasks have completed.\n * Taken from https://github.com/feross/run-series\n *\n * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.\n * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.\n */","map":null,"metadata":{},"sourceType":"script"}