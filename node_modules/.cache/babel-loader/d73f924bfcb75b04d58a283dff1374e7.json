{"ast":null,"code":"var _jsxFileName = \"/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/containers/Home.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MovieCard from '../components/MovieCard';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      query: 'harry potter',\n      loaded: false,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    //Api call based on user query\n    fetch('https://api.themoviedb.org/3/search/movie?api_key=17c21a1abd8ae7be6ee8986389011906&query=' + this.state.query).then(response => {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.json();\n    }) //Store data in state\n    .then(json => {\n      this.setState({\n        loaded: true,\n        error: false,\n        data: json.results\n      });\n    }) //Catches API limit errors, reloads page until limit resets\n    .catch(err => {\n      if (err.status === '429') {\n        this.setState({\n          error: true\n        });\n        this.fetchData();\n      }\n    });\n  }\n\n  renderMovies() {\n    var data = this.state.data;\n    var loaded = this.state.loaded; //If API call was succesfull and component has data, return grid of movies\n\n    if (loaded) {\n      return React.createElement(Row, {\n        className: \"movie-feed-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, data.map((item, i) => React.createElement(Col, {\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(MovieCard, {\n        id: data[i].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }))));\n    } //TODO: Return placeholder for movie loading \n    else {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.renderMovies()));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/sikidamjanovic/Documents/GitHub/react-movie-database/src/containers/Home.js"],"names":["React","Component","Container","Row","Col","MovieCard","Home","state","data","query","loaded","error","componentDidMount","fetchData","fetch","then","response","ok","json","setState","results","catch","err","status","renderMovies","map","item","i","id","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBM,KADyB,GACjB;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,KAAK,EAAE,cAFH;AAGJC,MAAAA,MAAM,EAAE,KAHJ;AAIJC,MAAAA,KAAK,EAAE;AAJH,KADiB;AAAA;;AAQzBC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,SAAL;AACH;;AAEDA,EAAAA,SAAS,GAAE;AACP;AACAC,IAAAA,KAAK,CAAC,8FAA6F,KAAKP,KAAL,CAAWE,KAAzG,CAAL,CACCM,IADD,CACOC,QAAQ,IAAI;AACf,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAAE,cAAMD,QAAN;AAAgB;;AACpC,aAAOA,QAAQ,CAACE,IAAT,EAAP;AACH,KAJD,EAKA;AALA,KAMCH,IAND,CAMOG,IAAI,IAAI;AACX,WAAKC,QAAL,CAAc;AAACT,QAAAA,MAAM,EAAC,IAAR;AAAcC,QAAAA,KAAK,EAAC,KAApB;AAA2BH,QAAAA,IAAI,EAAEU,IAAI,CAACE;AAAtC,OAAd;AACH,KARD,EASA;AATA,KAUCC,KAVD,CAUQC,GAAG,IAAI;AACX,UAAGA,GAAG,CAACC,MAAJ,KAAe,KAAlB,EAAwB;AACpB,aAAKJ,QAAL,CAAc;AAACR,UAAAA,KAAK,EAAC;AAAP,SAAd;AACA,aAAKE,SAAL;AACH;AACJ,KAfD;AAgBH;;AAEDW,EAAAA,YAAY,GAAE;AACV,QAAIhB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;AACA,QAAIE,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAxB,CAFU,CAGV;;AACA,QAAGA,MAAH,EAAU;AACN,aACI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,IAAI,CAACiB,GAAL,CAAS,CAACC,IAAD,EAAOC,CAAP,KACN,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAEnB,IAAI,CAACmB,CAAD,CAAJ,CAAQC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADH,CADL,CADJ;AASH,KAVD,CAWA;AAXA,SAYI;AACA,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKL,YAAL,EADL,CADJ,CADJ;AAOH;;AA7DwB;;AAgE7B,eAAelB,IAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport MovieCard from '../components/MovieCard'\n\nclass Home extends Component {\n    state = { \n        data: [],\n        query: 'harry potter',\n        loaded: false,\n        error: false\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    fetchData(){\n        //Api call based on user query\n        fetch('https://api.themoviedb.org/3/search/movie?api_key=17c21a1abd8ae7be6ee8986389011906&query='+ this.state.query)\n        .then( response => {\n            if (!response.ok) { throw response }\n            return response.json() \n        })\n        //Store data in state\n        .then( json => {\n            this.setState({loaded:true, error:false, data: json.results}) \n        })\n        //Catches API limit errors, reloads page until limit resets\n        .catch( err => {\n            if(err.status === '429'){\n                this.setState({error:true})\n                this.fetchData()\n            }\n        })\n    }\n\n    renderMovies(){\n        var data = this.state.data\n        var loaded = this.state.loaded\n        //If API call was succesfull and component has data, return grid of movies\n        if(loaded){\n            return (\n                <Row className=\"movie-feed-row\">\n                    {data.map((item, i) => (\n                        <Col sm={3}>\n                            <MovieCard id={data[i].id}/>\n                        </Col>\n                    ))}\n                </Row>\n            )\n        }\n        //TODO: Return placeholder for movie loading \n        else{\n            return <p>Loading...</p>\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    {this.renderMovies()}\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}