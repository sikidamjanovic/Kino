{"version":3,"file":"react-palette.umd.js","sources":["../src/getPalette.ts","../src/usePalette.tsx","../src/Palette.tsx"],"sourcesContent":["import Vibrant from \"node-vibrant\";\nimport camelCase from \"lodash.camelcase\";\nimport invoke from 'lodash.invoke';\n\nexport type PaletteColors = {\n  vibrant?: string;\n  muted?: string;\n  darkVibrant?: string;\n  darkMuted?: string;\n  lightVibrant?: string;\n  lightMuted?: string;\n  [name: string]: string | undefined;\n};\n\nexport async function getPalette(src: string) {\n  const palette = await Vibrant.from(src).getPalette();\n  const setPaletteColor = (acc, paletteName) => ({\n    ...acc,\n    [camelCase(paletteName)]: invoke(palette, [paletteName, 'getHex'])\n  });\n\n  return Object.keys(palette).reduce<PaletteColors>(setPaletteColor, {});\n}\n","import { useEffect, useReducer } from \"react\";\nimport { getPalette, PaletteColors } from \"./getPalette\";\n\nexport type PaletteState = {\n  loading: boolean;\n  error?: Error;\n  data: PaletteColors;\n}\n\nconst initialState: PaletteState = {\n  loading: true,\n  data: {},\n  error: undefined\n}\n\nfunction reducer(state: PaletteState, action) {\n  switch (action.type) {\n    case 'getPalette':\n      return initialState;\n    case 'resolvePalette':\n      return { ...state, data: action.payload, loading: false };\n    case 'rejectPalette':\n      return { ...state, error: action.payload, loading: false };\n  }\n}\n\nexport function usePalette(src: string) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'getPalette' });\n\n    getPalette(src)\n      .then(palette => {\n        dispatch({ type: 'resolvePalette', payload: palette });\n      })\n      .catch(ex => {\n        dispatch({ type: 'rejectPalette', payload: ex });\n      });\n  }, [src]);\n\n  return state;\n}\n","import React, { ReactNode } from \"react\";\nimport { PaletteState, usePalette } from \"./usePalette\";\n\nexport type PaletteProps = {\n  src: string;\n  children(palette: PaletteState): ReactNode;\n};\n\nexport const Palette: React.FC<PaletteProps> = ({\n  src,\n  children\n}: PaletteProps) => {\n  const palette = usePalette(src);\n\n  return <>{children(palette)}</>;\n};\n"],"names":["getPalette","src","Vibrant","from","palette","Object","keys","reduce","acc","paletteName","camelCase","invoke","initialState","loading","data","error","undefined","reducer","state","action","type","payload","usePalette","useReducer","useEffect","dispatch","then","catch","ex","Palette","ref","React","children"],"mappings":"giBAcsBA,WAAWC,8BACTC,EAAQC,KAAKF,GAAKD,4BAAlCI,UAMCC,OAAOC,KAAKF,GAASG,gBALHC,EAAKC,gBAAiBJ,iBAC1CG,UACFE,EAAUD,IAAeE,EAAOP,EAAS,CAACK,EAAa,gBAGS,0CCZ/DG,EAA6B,CACjCC,SAAS,EACTC,KAAM,GACNC,WAAOC,GAGT,SAASC,EAAQC,EAAqBC,UAC5BA,EAAOC,UACR,oBACIR,MACJ,wBACIP,iBAAKa,GAAOJ,KAAMK,EAAOE,QAASR,SAAS,QAC/C,uBACIR,iBAAKa,GAAOH,MAAOI,EAAOE,QAASR,SAAS,cAIzCS,EAAWrB,SACCsB,aAAWN,EAASL,wBAE9CY,uBACEC,EAAS,CAAEL,KAAM,eAEjBpB,EAAWC,GACRyB,cAAKtB,GACJqB,EAAS,CAAEL,KAAM,iBAAkBC,QAASjB,MAE7CuB,eAAMC,GACLH,EAAS,CAAEL,KAAM,gBAAiBC,QAASO,OAE9C,CAAC3B,IAEGiB,MCjCIW,WAAmCC,oBAIxC1B,EAAUkB,gBAETS,gCAAGC,EAAS5B"}